# This file was autogenerated by pylox
# on June 12, 2022 19:20:34


class Stmt:
    def accept(self, visitor: "Visitor"):
        raise NotImplementedError("Subclasses should implement this method")


class Expression(Stmt):
    def __init__(self, expression: "Expr"):
        self.expression = expression

    def accept(self, visitor: "Visitor"):
        return visitor.visit_expression_stmt(self)

    def __repr__(self):
        return f"{self.__class__.__name__}(expression={self.expression})"

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.expression == other.expression


class Print(Stmt):
    def __init__(self, expression: "Expr"):
        self.expression = expression

    def accept(self, visitor: "Visitor"):
        return visitor.visit_print_stmt(self)

    def __repr__(self):
        return f"{self.__class__.__name__}(expression={self.expression})"

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.expression == other.expression
