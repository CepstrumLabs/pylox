# This file was autogenerated by pylox
# on June 14, 2022 23:43:38
from typing import List

from pylox.scanner import LoxToken as Token


class Stmt:
    def accept(self, visitor: "StmtVisitor"):
        raise NotImplementedError("Subclasses should implement this method")


class Expression(Stmt):
    def __init__(self, expression: "Expr"):
        self.expression = expression

    def accept(self, visitor: "StmtVisitor"):
        return visitor.visit_expression_stmt(self)

    def __repr__(self):
        return f"{self.__class__.__name__}(expression={self.expression})"

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.expression == other.expression


class Print(Stmt):
    def __init__(self, expression: "Expr"):
        self.expression = expression

    def accept(self, visitor: "StmtVisitor"):
        return visitor.visit_print_stmt(self)

    def __repr__(self):
        return f"{self.__class__.__name__}(expression={self.expression})"

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.expression == other.expression


class Var(Stmt):
    def __init__(self, name: "Token", initialiser: "Expr"):
        self.name = name
        self.initialiser = initialiser

    def accept(self, visitor: "StmtVisitor"):
        return visitor.visit_var_stmt(self)

    def __repr__(self):
        return f"{self.__class__.__name__}(name={self.name}, initialiser={self.initialiser})"

    def __eq__(self, other):
        return (
            isinstance(other, self.__class__)
            and self.name == other.name
            and self.initialiser == other.initialiser
        )


class Block(Stmt):
    def __init__(self, statements: "List[Stmt]"):
        self.statements = statements

    def accept(self, visitor: "StmtVisitor"):
        return visitor.visit_block_stmt(self)

    def __repr__(self):
        return f"{self.__class__.__name__}(statements={self.statements})"

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.statements == other.statements


class If(Stmt):
    def __init__(self, condition: "Expr", then_branch: "Stmt", else_branch: "Stmt"):
        self.condition = condition
        self.then_branch = then_branch
        self.else_branch = else_branch

    def accept(self, visitor: "StmtVisitor"):
        return visitor.visit_if_stmt(self)

    def __repr__(self):
        return f"{self.__class__.__name__}(condition={self.condition}, then_branch={self.then_branch}, else_branch={self.else_branch})"

    def __eq__(self, other):
        return (
            isinstance(other, self.__class__)
            and self.condition == other.condition
            and self.then_branch == other.then_branch
            and self.else_branch == other.else_branch
        )


class While(Stmt):
    def __init__(self, condition: "Expr", statement: "Stmt"):
        self.condition = condition
        self.statement = statement

    def accept(self, visitor: "StmtVisitor"):
        return visitor.visit_while_stmt(self)

    def __repr__(self):
        return f"{self.__class__.__name__}(condition={self.condition}, statement={self.statement})"

    def __eq__(self, other):
        return (
            isinstance(other, self.__class__)
            and self.condition == other.condition
            and self.statement == other.statement
        )
