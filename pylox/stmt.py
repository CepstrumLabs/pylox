# This file was autogenerated by pylox
# on June 13, 2022 22:07:59

from pylox.scanner import LoxToken as Token

class Stmt:
	
	def accept(self, visitor: 'StmtVisitor'):
		raise NotImplementedError('Subclasses should implement this method')

class Expression(Stmt):

	def __init__(self, expression: 'Expr'):
		self.expression = expression

	def accept(self, visitor: 'StmtVisitor'):
		return visitor.visit_expression_stmt(self)

	def __repr__(self):
		return f'{self.__class__.__name__}(expression={self.expression})'

	def __eq__(self, other):
		return isinstance(other, self.__class__) and self.expression==other.expression


class Print(Stmt):

	def __init__(self, expression: 'Expr'):
		self.expression = expression

	def accept(self, visitor: 'StmtVisitor'):
		return visitor.visit_print_stmt(self)

	def __repr__(self):
		return f'{self.__class__.__name__}(expression={self.expression})'

	def __eq__(self, other):
		return isinstance(other, self.__class__) and self.expression==other.expression


class Var(Stmt):

	def __init__(self, name: 'Token', initialiser: 'Expr'):
		self.name = name
		self.initialiser = initialiser

	def accept(self, visitor: 'StmtVisitor'):
		return visitor.visit_var_stmt(self)

	def __repr__(self):
		return f'{self.__class__.__name__}(name={self.name}, initialiser={self.initialiser})'

	def __eq__(self, other):
		return isinstance(other, self.__class__) and self.name==other.name and self.initialiser==other.initialiser


